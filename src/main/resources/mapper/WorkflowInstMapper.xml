<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quark.data.rapid.server.mapper.WorkflowInstMapper">
  <resultMap id="BaseResultMap" type="com.quark.data.rapid.server.model.WorkflowInst">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="data_stream_workflow_id" jdbcType="BIGINT" property="dataStreamWorkflowId" />
    <result column="runtime_env_id" jdbcType="BIGINT" property="runtimeEnvId" />
    <result column="workflow_inst_name" jdbcType="VARCHAR" property="workflowInstName" />
    <result column="start_time" jdbcType="TIMESTAMP" property="startTime" />
    <result column="end_time" jdbcType="TIMESTAMP" property="endTime" />
    <result column="status" jdbcType="CHAR" property="status" />
    <result column="runtime_job_id" jdbcType="VARCHAR" property="runtimeJobId" />
    <result column="total" jdbcType="INTEGER" property="total" />
    <result column="created" jdbcType="INTEGER" property="created" />
    <result column="scheduled" jdbcType="INTEGER" property="scheduled" />
    <result column="deploying" jdbcType="INTEGER" property="deploying" />
    <result column="running" jdbcType="INTEGER" property="running" />
    <result column="finished" jdbcType="INTEGER" property="finished" />
    <result column="canceling" jdbcType="INTEGER" property="canceling" />
    <result column="canceled" jdbcType="INTEGER" property="canceled" />
    <result column="failed" jdbcType="INTEGER" property="failed" />
    <result column="reconciling" jdbcType="INTEGER" property="reconciling" />
    <result column="duration" jdbcType="BIGINT" property="duration" />
    <result column="is_del" jdbcType="CHAR" property="isDel" />
    <result column="create_time" jdbcType="TIMESTAMP" property="createTime" />
    <result column="update_time" jdbcType="TIMESTAMP" property="updateTime" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.quark.data.rapid.server.model.WorkflowInst">
    <result column="runtime_json" jdbcType="LONGVARCHAR" property="runtimeJson" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, data_stream_workflow_id, runtime_env_id, workflow_inst_name, start_time, end_time, 
    status, runtime_job_id, total, created, scheduled, deploying, running, finished, 
    canceling, canceled, failed, reconciling, duration, is_del, create_time, update_time
  </sql>
  <sql id="Blob_Column_List">
    runtime_json
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.quark.data.rapid.server.model.WorkflowInstExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_workflow_inst
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.quark.data.rapid.server.model.WorkflowInstExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from data_stream_workflow_inst
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_workflow_inst
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from data_stream_workflow_inst
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.quark.data.rapid.server.model.WorkflowInstExample">
    delete from data_stream_workflow_inst
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.quark.data.rapid.server.model.WorkflowInst">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into data_stream_workflow_inst (data_stream_workflow_id, runtime_env_id, 
      workflow_inst_name, start_time, end_time, 
      status, runtime_job_id, total, 
      created, scheduled, deploying, 
      running, finished, canceling, 
      canceled, failed, reconciling, 
      duration, is_del, create_time, 
      update_time, runtime_json)
    values (#{dataStreamWorkflowId,jdbcType=BIGINT}, #{runtimeEnvId,jdbcType=BIGINT}, 
      #{workflowInstName,jdbcType=VARCHAR}, #{startTime,jdbcType=TIMESTAMP}, #{endTime,jdbcType=TIMESTAMP}, 
      #{status,jdbcType=CHAR}, #{runtimeJobId,jdbcType=VARCHAR}, #{total,jdbcType=INTEGER}, 
      #{created,jdbcType=INTEGER}, #{scheduled,jdbcType=INTEGER}, #{deploying,jdbcType=INTEGER}, 
      #{running,jdbcType=INTEGER}, #{finished,jdbcType=INTEGER}, #{canceling,jdbcType=INTEGER}, 
      #{canceled,jdbcType=INTEGER}, #{failed,jdbcType=INTEGER}, #{reconciling,jdbcType=INTEGER}, 
      #{duration,jdbcType=BIGINT}, #{isDel,jdbcType=CHAR}, #{createTime,jdbcType=TIMESTAMP}, 
      #{updateTime,jdbcType=TIMESTAMP}, #{runtimeJson,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.quark.data.rapid.server.model.WorkflowInst">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into data_stream_workflow_inst
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="dataStreamWorkflowId != null">
        data_stream_workflow_id,
      </if>
      <if test="runtimeEnvId != null">
        runtime_env_id,
      </if>
      <if test="workflowInstName != null">
        workflow_inst_name,
      </if>
      <if test="startTime != null">
        start_time,
      </if>
      <if test="endTime != null">
        end_time,
      </if>
      <if test="status != null">
        status,
      </if>
      <if test="runtimeJobId != null">
        runtime_job_id,
      </if>
      <if test="total != null">
        total,
      </if>
      <if test="created != null">
        created,
      </if>
      <if test="scheduled != null">
        scheduled,
      </if>
      <if test="deploying != null">
        deploying,
      </if>
      <if test="running != null">
        running,
      </if>
      <if test="finished != null">
        finished,
      </if>
      <if test="canceling != null">
        canceling,
      </if>
      <if test="canceled != null">
        canceled,
      </if>
      <if test="failed != null">
        failed,
      </if>
      <if test="reconciling != null">
        reconciling,
      </if>
      <if test="duration != null">
        duration,
      </if>
      <if test="isDel != null">
        is_del,
      </if>
      <if test="createTime != null">
        create_time,
      </if>
      <if test="updateTime != null">
        update_time,
      </if>
      <if test="runtimeJson != null">
        runtime_json,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="dataStreamWorkflowId != null">
        #{dataStreamWorkflowId,jdbcType=BIGINT},
      </if>
      <if test="runtimeEnvId != null">
        #{runtimeEnvId,jdbcType=BIGINT},
      </if>
      <if test="workflowInstName != null">
        #{workflowInstName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        #{status,jdbcType=CHAR},
      </if>
      <if test="runtimeJobId != null">
        #{runtimeJobId,jdbcType=VARCHAR},
      </if>
      <if test="total != null">
        #{total,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        #{created,jdbcType=INTEGER},
      </if>
      <if test="scheduled != null">
        #{scheduled,jdbcType=INTEGER},
      </if>
      <if test="deploying != null">
        #{deploying,jdbcType=INTEGER},
      </if>
      <if test="running != null">
        #{running,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        #{finished,jdbcType=INTEGER},
      </if>
      <if test="canceling != null">
        #{canceling,jdbcType=INTEGER},
      </if>
      <if test="canceled != null">
        #{canceled,jdbcType=INTEGER},
      </if>
      <if test="failed != null">
        #{failed,jdbcType=INTEGER},
      </if>
      <if test="reconciling != null">
        #{reconciling,jdbcType=INTEGER},
      </if>
      <if test="duration != null">
        #{duration,jdbcType=BIGINT},
      </if>
      <if test="isDel != null">
        #{isDel,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="runtimeJson != null">
        #{runtimeJson,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.quark.data.rapid.server.model.WorkflowInstExample" resultType="java.lang.Long">
    select count(*) from data_stream_workflow_inst
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update data_stream_workflow_inst
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.dataStreamWorkflowId != null">
        data_stream_workflow_id = #{record.dataStreamWorkflowId,jdbcType=BIGINT},
      </if>
      <if test="record.runtimeEnvId != null">
        runtime_env_id = #{record.runtimeEnvId,jdbcType=BIGINT},
      </if>
      <if test="record.workflowInstName != null">
        workflow_inst_name = #{record.workflowInstName,jdbcType=VARCHAR},
      </if>
      <if test="record.startTime != null">
        start_time = #{record.startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.endTime != null">
        end_time = #{record.endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.status != null">
        status = #{record.status,jdbcType=CHAR},
      </if>
      <if test="record.runtimeJobId != null">
        runtime_job_id = #{record.runtimeJobId,jdbcType=VARCHAR},
      </if>
      <if test="record.total != null">
        total = #{record.total,jdbcType=INTEGER},
      </if>
      <if test="record.created != null">
        created = #{record.created,jdbcType=INTEGER},
      </if>
      <if test="record.scheduled != null">
        scheduled = #{record.scheduled,jdbcType=INTEGER},
      </if>
      <if test="record.deploying != null">
        deploying = #{record.deploying,jdbcType=INTEGER},
      </if>
      <if test="record.running != null">
        running = #{record.running,jdbcType=INTEGER},
      </if>
      <if test="record.finished != null">
        finished = #{record.finished,jdbcType=INTEGER},
      </if>
      <if test="record.canceling != null">
        canceling = #{record.canceling,jdbcType=INTEGER},
      </if>
      <if test="record.canceled != null">
        canceled = #{record.canceled,jdbcType=INTEGER},
      </if>
      <if test="record.failed != null">
        failed = #{record.failed,jdbcType=INTEGER},
      </if>
      <if test="record.reconciling != null">
        reconciling = #{record.reconciling,jdbcType=INTEGER},
      </if>
      <if test="record.duration != null">
        duration = #{record.duration,jdbcType=BIGINT},
      </if>
      <if test="record.isDel != null">
        is_del = #{record.isDel,jdbcType=CHAR},
      </if>
      <if test="record.createTime != null">
        create_time = #{record.createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.updateTime != null">
        update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="record.runtimeJson != null">
        runtime_json = #{record.runtimeJson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update data_stream_workflow_inst
    set id = #{record.id,jdbcType=BIGINT},
      data_stream_workflow_id = #{record.dataStreamWorkflowId,jdbcType=BIGINT},
      runtime_env_id = #{record.runtimeEnvId,jdbcType=BIGINT},
      workflow_inst_name = #{record.workflowInstName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=CHAR},
      runtime_job_id = #{record.runtimeJobId,jdbcType=VARCHAR},
      total = #{record.total,jdbcType=INTEGER},
      created = #{record.created,jdbcType=INTEGER},
      scheduled = #{record.scheduled,jdbcType=INTEGER},
      deploying = #{record.deploying,jdbcType=INTEGER},
      running = #{record.running,jdbcType=INTEGER},
      finished = #{record.finished,jdbcType=INTEGER},
      canceling = #{record.canceling,jdbcType=INTEGER},
      canceled = #{record.canceled,jdbcType=INTEGER},
      failed = #{record.failed,jdbcType=INTEGER},
      reconciling = #{record.reconciling,jdbcType=INTEGER},
      duration = #{record.duration,jdbcType=BIGINT},
      is_del = #{record.isDel,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP},
      runtime_json = #{record.runtimeJson,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update data_stream_workflow_inst
    set id = #{record.id,jdbcType=BIGINT},
      data_stream_workflow_id = #{record.dataStreamWorkflowId,jdbcType=BIGINT},
      runtime_env_id = #{record.runtimeEnvId,jdbcType=BIGINT},
      workflow_inst_name = #{record.workflowInstName,jdbcType=VARCHAR},
      start_time = #{record.startTime,jdbcType=TIMESTAMP},
      end_time = #{record.endTime,jdbcType=TIMESTAMP},
      status = #{record.status,jdbcType=CHAR},
      runtime_job_id = #{record.runtimeJobId,jdbcType=VARCHAR},
      total = #{record.total,jdbcType=INTEGER},
      created = #{record.created,jdbcType=INTEGER},
      scheduled = #{record.scheduled,jdbcType=INTEGER},
      deploying = #{record.deploying,jdbcType=INTEGER},
      running = #{record.running,jdbcType=INTEGER},
      finished = #{record.finished,jdbcType=INTEGER},
      canceling = #{record.canceling,jdbcType=INTEGER},
      canceled = #{record.canceled,jdbcType=INTEGER},
      failed = #{record.failed,jdbcType=INTEGER},
      reconciling = #{record.reconciling,jdbcType=INTEGER},
      duration = #{record.duration,jdbcType=BIGINT},
      is_del = #{record.isDel,jdbcType=CHAR},
      create_time = #{record.createTime,jdbcType=TIMESTAMP},
      update_time = #{record.updateTime,jdbcType=TIMESTAMP}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.quark.data.rapid.server.model.WorkflowInst">
    update data_stream_workflow_inst
    <set>
      <if test="dataStreamWorkflowId != null">
        data_stream_workflow_id = #{dataStreamWorkflowId,jdbcType=BIGINT},
      </if>
      <if test="runtimeEnvId != null">
        runtime_env_id = #{runtimeEnvId,jdbcType=BIGINT},
      </if>
      <if test="workflowInstName != null">
        workflow_inst_name = #{workflowInstName,jdbcType=VARCHAR},
      </if>
      <if test="startTime != null">
        start_time = #{startTime,jdbcType=TIMESTAMP},
      </if>
      <if test="endTime != null">
        end_time = #{endTime,jdbcType=TIMESTAMP},
      </if>
      <if test="status != null">
        status = #{status,jdbcType=CHAR},
      </if>
      <if test="runtimeJobId != null">
        runtime_job_id = #{runtimeJobId,jdbcType=VARCHAR},
      </if>
      <if test="total != null">
        total = #{total,jdbcType=INTEGER},
      </if>
      <if test="created != null">
        created = #{created,jdbcType=INTEGER},
      </if>
      <if test="scheduled != null">
        scheduled = #{scheduled,jdbcType=INTEGER},
      </if>
      <if test="deploying != null">
        deploying = #{deploying,jdbcType=INTEGER},
      </if>
      <if test="running != null">
        running = #{running,jdbcType=INTEGER},
      </if>
      <if test="finished != null">
        finished = #{finished,jdbcType=INTEGER},
      </if>
      <if test="canceling != null">
        canceling = #{canceling,jdbcType=INTEGER},
      </if>
      <if test="canceled != null">
        canceled = #{canceled,jdbcType=INTEGER},
      </if>
      <if test="failed != null">
        failed = #{failed,jdbcType=INTEGER},
      </if>
      <if test="reconciling != null">
        reconciling = #{reconciling,jdbcType=INTEGER},
      </if>
      <if test="duration != null">
        duration = #{duration,jdbcType=BIGINT},
      </if>
      <if test="isDel != null">
        is_del = #{isDel,jdbcType=CHAR},
      </if>
      <if test="createTime != null">
        create_time = #{createTime,jdbcType=TIMESTAMP},
      </if>
      <if test="updateTime != null">
        update_time = #{updateTime,jdbcType=TIMESTAMP},
      </if>
      <if test="runtimeJson != null">
        runtime_json = #{runtimeJson,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.quark.data.rapid.server.model.WorkflowInst">
    update data_stream_workflow_inst
    set data_stream_workflow_id = #{dataStreamWorkflowId,jdbcType=BIGINT},
      runtime_env_id = #{runtimeEnvId,jdbcType=BIGINT},
      workflow_inst_name = #{workflowInstName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR},
      runtime_job_id = #{runtimeJobId,jdbcType=VARCHAR},
      total = #{total,jdbcType=INTEGER},
      created = #{created,jdbcType=INTEGER},
      scheduled = #{scheduled,jdbcType=INTEGER},
      deploying = #{deploying,jdbcType=INTEGER},
      running = #{running,jdbcType=INTEGER},
      finished = #{finished,jdbcType=INTEGER},
      canceling = #{canceling,jdbcType=INTEGER},
      canceled = #{canceled,jdbcType=INTEGER},
      failed = #{failed,jdbcType=INTEGER},
      reconciling = #{reconciling,jdbcType=INTEGER},
      duration = #{duration,jdbcType=BIGINT},
      is_del = #{isDel,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP},
      runtime_json = #{runtimeJson,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quark.data.rapid.server.model.WorkflowInst">
    update data_stream_workflow_inst
    set data_stream_workflow_id = #{dataStreamWorkflowId,jdbcType=BIGINT},
      runtime_env_id = #{runtimeEnvId,jdbcType=BIGINT},
      workflow_inst_name = #{workflowInstName,jdbcType=VARCHAR},
      start_time = #{startTime,jdbcType=TIMESTAMP},
      end_time = #{endTime,jdbcType=TIMESTAMP},
      status = #{status,jdbcType=CHAR},
      runtime_job_id = #{runtimeJobId,jdbcType=VARCHAR},
      total = #{total,jdbcType=INTEGER},
      created = #{created,jdbcType=INTEGER},
      scheduled = #{scheduled,jdbcType=INTEGER},
      deploying = #{deploying,jdbcType=INTEGER},
      running = #{running,jdbcType=INTEGER},
      finished = #{finished,jdbcType=INTEGER},
      canceling = #{canceling,jdbcType=INTEGER},
      canceled = #{canceled,jdbcType=INTEGER},
      failed = #{failed,jdbcType=INTEGER},
      reconciling = #{reconciling,jdbcType=INTEGER},
      duration = #{duration,jdbcType=BIGINT},
      is_del = #{isDel,jdbcType=CHAR},
      create_time = #{createTime,jdbcType=TIMESTAMP},
      update_time = #{updateTime,jdbcType=TIMESTAMP}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectForUpdate" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_workflow_inst
    where id = #{id,jdbcType=BIGINT} for update
  </select>
</mapper>