<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.quark.data.rapid.server.mapper.NodeTemplateMapper">
  <resultMap id="BaseResultMap" type="com.quark.data.rapid.server.model.NodeTemplate">
    <id column="id" jdbcType="BIGINT" property="id" />
    <result column="node_type" jdbcType="CHAR" property="nodeType" />
    <result column="belong_type" jdbcType="CHAR" property="belongType" />
    <result column="node_template_name" jdbcType="VARCHAR" property="nodeTemplateName" />
    <result column="jar_path" jdbcType="VARCHAR" property="jarPath" />
    <result column="classname" jdbcType="VARCHAR" property="classname" />
    <result column="icon_path" jdbcType="VARCHAR" property="iconPath" />
  </resultMap>
  <resultMap extends="BaseResultMap" id="ResultMapWithBLOBs" type="com.quark.data.rapid.server.model.NodeTemplate">
    <result column="json_metadata" jdbcType="LONGVARCHAR" property="jsonMetadata" />
  </resultMap>
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Update_By_Example_Where_Clause">
    <where>
      <foreach collection="example.oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, node_type, belong_type, node_template_name, jar_path, classname, icon_path
  </sql>
  <sql id="Blob_Column_List">
    json_metadata
  </sql>
  <select id="selectByExampleWithBLOBs" parameterType="com.quark.data.rapid.server.model.NodeTemplateExample" resultMap="ResultMapWithBLOBs">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_node_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByExample" parameterType="com.quark.data.rapid.server.model.NodeTemplateExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    <include refid="Base_Column_List" />
    from data_stream_node_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
    <if test="limitStart != null and limitStart>=0">
      limit #{limitStart} , #{limitEnd}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_node_template
    where id = #{id,jdbcType=BIGINT}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Long">
    delete from data_stream_node_template
    where id = #{id,jdbcType=BIGINT}
  </delete>
  <delete id="deleteByExample" parameterType="com.quark.data.rapid.server.model.NodeTemplateExample">
    delete from data_stream_node_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </delete>
  <insert id="insert" parameterType="com.quark.data.rapid.server.model.NodeTemplate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into data_stream_node_template (node_type, belong_type, node_template_name, 
      jar_path, classname, icon_path, 
      json_metadata)
    values (#{nodeType,jdbcType=CHAR}, #{belongType,jdbcType=CHAR}, #{nodeTemplateName,jdbcType=VARCHAR}, 
      #{jarPath,jdbcType=VARCHAR}, #{classname,jdbcType=VARCHAR}, #{iconPath,jdbcType=VARCHAR}, 
      #{jsonMetadata,jdbcType=LONGVARCHAR})
  </insert>
  <insert id="insertSelective" parameterType="com.quark.data.rapid.server.model.NodeTemplate">
    <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Long">
      SELECT LAST_INSERT_ID()
    </selectKey>
    insert into data_stream_node_template
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="nodeType != null">
        node_type,
      </if>
      <if test="belongType != null">
        belong_type,
      </if>
      <if test="nodeTemplateName != null">
        node_template_name,
      </if>
      <if test="jarPath != null">
        jar_path,
      </if>
      <if test="classname != null">
        classname,
      </if>
      <if test="iconPath != null">
        icon_path,
      </if>
      <if test="jsonMetadata != null">
        json_metadata,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="nodeType != null">
        #{nodeType,jdbcType=CHAR},
      </if>
      <if test="belongType != null">
        #{belongType,jdbcType=CHAR},
      </if>
      <if test="nodeTemplateName != null">
        #{nodeTemplateName,jdbcType=VARCHAR},
      </if>
      <if test="jarPath != null">
        #{jarPath,jdbcType=VARCHAR},
      </if>
      <if test="classname != null">
        #{classname,jdbcType=VARCHAR},
      </if>
      <if test="iconPath != null">
        #{iconPath,jdbcType=VARCHAR},
      </if>
      <if test="jsonMetadata != null">
        #{jsonMetadata,jdbcType=LONGVARCHAR},
      </if>
    </trim>
  </insert>
  <select id="countByExample" parameterType="com.quark.data.rapid.server.model.NodeTemplateExample" resultType="java.lang.Long">
    select count(*) from data_stream_node_template
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
  </select>
  <update id="updateByExampleSelective" parameterType="map">
    update data_stream_node_template
    <set>
      <if test="record.id != null">
        id = #{record.id,jdbcType=BIGINT},
      </if>
      <if test="record.nodeType != null">
        node_type = #{record.nodeType,jdbcType=CHAR},
      </if>
      <if test="record.belongType != null">
        belong_type = #{record.belongType,jdbcType=CHAR},
      </if>
      <if test="record.nodeTemplateName != null">
        node_template_name = #{record.nodeTemplateName,jdbcType=VARCHAR},
      </if>
      <if test="record.jarPath != null">
        jar_path = #{record.jarPath,jdbcType=VARCHAR},
      </if>
      <if test="record.classname != null">
        classname = #{record.classname,jdbcType=VARCHAR},
      </if>
      <if test="record.iconPath != null">
        icon_path = #{record.iconPath,jdbcType=VARCHAR},
      </if>
      <if test="record.jsonMetadata != null">
        json_metadata = #{record.jsonMetadata,jdbcType=LONGVARCHAR},
      </if>
    </set>
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExampleWithBLOBs" parameterType="map">
    update data_stream_node_template
    set id = #{record.id,jdbcType=BIGINT},
      node_type = #{record.nodeType,jdbcType=CHAR},
      belong_type = #{record.belongType,jdbcType=CHAR},
      node_template_name = #{record.nodeTemplateName,jdbcType=VARCHAR},
      jar_path = #{record.jarPath,jdbcType=VARCHAR},
      classname = #{record.classname,jdbcType=VARCHAR},
      icon_path = #{record.iconPath,jdbcType=VARCHAR},
      json_metadata = #{record.jsonMetadata,jdbcType=LONGVARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByExample" parameterType="map">
    update data_stream_node_template
    set id = #{record.id,jdbcType=BIGINT},
      node_type = #{record.nodeType,jdbcType=CHAR},
      belong_type = #{record.belongType,jdbcType=CHAR},
      node_template_name = #{record.nodeTemplateName,jdbcType=VARCHAR},
      jar_path = #{record.jarPath,jdbcType=VARCHAR},
      classname = #{record.classname,jdbcType=VARCHAR},
      icon_path = #{record.iconPath,jdbcType=VARCHAR}
    <if test="_parameter != null">
      <include refid="Update_By_Example_Where_Clause" />
    </if>
  </update>
  <update id="updateByPrimaryKeySelective" parameterType="com.quark.data.rapid.server.model.NodeTemplate">
    update data_stream_node_template
    <set>
      <if test="nodeType != null">
        node_type = #{nodeType,jdbcType=CHAR},
      </if>
      <if test="belongType != null">
        belong_type = #{belongType,jdbcType=CHAR},
      </if>
      <if test="nodeTemplateName != null">
        node_template_name = #{nodeTemplateName,jdbcType=VARCHAR},
      </if>
      <if test="jarPath != null">
        jar_path = #{jarPath,jdbcType=VARCHAR},
      </if>
      <if test="classname != null">
        classname = #{classname,jdbcType=VARCHAR},
      </if>
      <if test="iconPath != null">
        icon_path = #{iconPath,jdbcType=VARCHAR},
      </if>
      <if test="jsonMetadata != null">
        json_metadata = #{jsonMetadata,jdbcType=LONGVARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKeyWithBLOBs" parameterType="com.quark.data.rapid.server.model.NodeTemplate">
    update data_stream_node_template
    set node_type = #{nodeType,jdbcType=CHAR},
      belong_type = #{belongType,jdbcType=CHAR},
      node_template_name = #{nodeTemplateName,jdbcType=VARCHAR},
      jar_path = #{jarPath,jdbcType=VARCHAR},
      classname = #{classname,jdbcType=VARCHAR},
      icon_path = #{iconPath,jdbcType=VARCHAR},
      json_metadata = #{jsonMetadata,jdbcType=LONGVARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.quark.data.rapid.server.model.NodeTemplate">
    update data_stream_node_template
    set node_type = #{nodeType,jdbcType=CHAR},
      belong_type = #{belongType,jdbcType=CHAR},
      node_template_name = #{nodeTemplateName,jdbcType=VARCHAR},
      jar_path = #{jarPath,jdbcType=VARCHAR},
      classname = #{classname,jdbcType=VARCHAR},
      icon_path = #{iconPath,jdbcType=VARCHAR}
    where id = #{id,jdbcType=BIGINT}
  </update>
  <select id="selectForUpdate" parameterType="java.lang.Long" resultMap="ResultMapWithBLOBs">
    select 
    <include refid="Base_Column_List" />
    ,
    <include refid="Blob_Column_List" />
    from data_stream_node_template
    where id = #{id,jdbcType=BIGINT} for update
  </select>
</mapper>